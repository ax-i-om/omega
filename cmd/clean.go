/*
Tempest- Leveraging paste sites as a medium for discovery
Copyright Â© 2023 ax-i-om <addressaxiom@pm.me>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
// package cmd ...
package cmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/ax-i-om/tempest/internal/globals"
	"github.com/ax-i-om/tempest/internal/handlers"
	"github.com/spf13/cobra"
)

// cleanCmd represents the clean command
var cleanCmd = &cobra.Command{
	Use:   "clean <filename|filepath>",
	Short: "Clean JSON/CSV files generated by Tempest.",
	Long: `
The clean function is used to validate/deduplicate JSON/CSV files
that are generated by Tempest.

If you decide to output the results to a JSON file specifically, 
it will not be valid JSON. The clean function will automatically
convert the JSON invalid file formatting into valid json; however,
reusing this file for results will cause further formatting issues. 

Note: Unlike other functions in Tempest, a file 
extension (.json/.csv) will not be automatically appended. When 
cleaning, you must specify the file extension.`,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) < 1 {
			cmd.Usage()
			os.Exit(0)
		}
		// Set output mode to clean
		globals.Mode = "clean"
		fmt.Println("Output Mode:", globals.Mode)
		if strings.Contains(args[0], ".json") {
			// Set filename to args[2], append .json if necessary
			globals.Filename = handlers.FixName(args[0], ".json")
			fmt.Println("File Name:", globals.Filename)
			fmt.Println()
			// Remove any duplicate lines from json file
			err := handlers.Deduplicate(globals.Filename)
			if err != nil {
				fmt.Fprintf(os.Stderr, "%s\n", err)
				os.Exit(1)
			}

			// Attempt to read the specified json file
			content, err := os.ReadFile("clean-" + globals.Filename)
			if err != nil {
				fmt.Fprintf(os.Stderr, "%s\n", err)
				// Calling to wipe() here is unnecessary, as the clean case doesn't assign any files/writers
				// Exit with error
				os.Exit(1)
			}

			// Trim newline from end of file
			middle := strings.TrimRight(string(content), "\n")
			// Trim the rightmost comma from end file
			middle = strings.TrimRight(middle, ",")
			// Append two tabs to the beginning of each entry (formatting)
			middle = strings.ReplaceAll(middle, "{\"source\":\"", "\t\t{\"source\":\"")

			// Combine the strings
			comp := "{\n\t\"content\":[\n" + middle + "\n\t]\n}"

			// Attempt to write the combined strings new a new file, with a name based on the specified filename
			err = os.WriteFile("clean-"+globals.Filename, []byte(comp), 0600)
			if err != nil {
				fmt.Fprintf(os.Stderr, "%s\n", err)
				// Exit with error
				os.Exit(1)
			}

			fmt.Println("Finished cleaning", globals.Filename)
			fmt.Println("Cleaned file name: clean-" + globals.Filename)
			// Exit successfully
			os.Exit(0)
		} else if strings.Contains(args[0], ".csv") {
			// Set filename to args[2], append .csv if necessary
			globals.Filename = handlers.FixName(args[0], ".csv")
			fmt.Println("File Name:", globals.Filename)
			fmt.Println()
			// Remove any duplicate lines from CSV file
			err := handlers.Deduplicate(globals.Filename)
			if err != nil {
				fmt.Fprintf(os.Stderr, "%s\n", err)
				os.Exit(1)
			}
		} else {
			fmt.Println("Please specify a file ending in .json or .csv")
		}
		os.Exit(0)
	},
}

func init() {
	rootCmd.AddCommand(cleanCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// cleanCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// cleanCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
